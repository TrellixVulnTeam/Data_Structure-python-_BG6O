# Python program to find predecessor and successor in a BST 
  
# A BST node 
class Node: 
  
    # Constructor to create a new node 
    def __init__(self, key): 
        self.key  = key 
        self.left = None
        self.right = None
  
# This function finds predecessor and successor of key in BST 
# It sets pre and suc as predecessor and successor respectively 
def findPreSuc(root, key): 
  
    # Base Case 
    if root is None: 
        return
  
    # If key is present at root 
    if root.key == key: 
  
        # the maximum value in left subtree is predecessor 
        if root.left is not None: 
            tmp = root.left  
            while(tmp.right): 
                tmp = tmp.right  
            findPreSuc.pre = tmp 
  
  
        # the minimum value in right subtree is successor 
        if root.right is not None: 
            tmp = root.right 
            while(temp.left): 
                tmp = tmp.left  
            findPreSuc.suc = tmp  
  
        return 
  
    # If key is smaller than root's key, go to left subtree 
    if root.key > key : 
        findPreSuc.suc = root  
        findPreSuc(root.left, key) 
  
    else: # go to right subtree 
        findPreSuc.pre = root 
        findPreSuc(root.right, key) 
  
# A utility function to insert a new node in with given key in BST 
def insert(node , key): 
    if node is None: 
        return Node(key) 
  
    if key < node.key: 
        node.left = insert(node.left, key) 
  
    else: 
        node.right = insert(node.right, key) 
  
    return node 
  
  
# Driver program to test above function 
key = 65 #Key to be searched in BST 
   
""" Let us create following BST 
              50 
           /     \ 
          30      70 
         /  \    /  \ 
       20   40  60   80  
"""
root = None
root = insert(root, 50) 
insert(root, 30); 
insert(root, 20); 
insert(root, 40); 
insert(root, 70); 
insert(root, 60); 
insert(root, 80); 
  
# Static variables of the function findPreSuc  
findPreSuc.pre = None
findPreSuc.suc = None
  
findPreSuc(root, key) 
  
if findPreSuc.pre is not None: 
    print "Predecessor is", findPreSuc.pre.key 
  
else: 
    print "No Predecessor"
  
if findPreSuc.suc is not None: 
    print "Successor is", findPreSuc.suc.key 
else: 
    print "No Successor"
  
# This code is contributed by Nikhil Kumar Singh(nickzuck_007) 







































""" Python3 code for inorder succesor  
and predecessor of tree """
  
# A Binary Tree Node  
# Utility function to create a new tree node  
class getnode:  
  
    # Constructor to create a new node  
    def __init__(self, data):  
        self.data = data  
        self.left = None
        self.right = None
  
"""  
since inorder traversal results in  
ascendingorder visit to node , we  
can store the values of the largest  
o which is smaller than a (predecessor)  
and smallest no which is large than  
a (succesor) using inorder traversal  
"""
def find_p_s(root, a, p, q):  
  
    # If root is None return  
    if(not root): 
        return
          
    # traverse the left subtree      
    find_p_s(root.left, a, p, q)  
      
    # root data is greater than a  
    if(root and root.data > a): 
          
        # q stores the node whose data is greater  
        # than a and is smaller than the previously  
        # stored data in *q which is sucessor  
        if((not q[0]) or q[0] and 
                q[0].data > root.data): 
            q[0] = root 
              
    # if the root data is smaller than  
    # store it in p which is predecessor  
    elif(root and root.data < a): 
        p[0]= root  
      
    # traverse the right subtree  
    find_p_s(root.right, a, p, q) 
  
# Driver Code 
if __name__ == '__main__':  
  
    root1 = getnode(50)  
    root1.left = getnode(20)  
    root1.right = getnode(60)  
    root1.left.left = getnode(10)  
    root1.left.right = getnode(30)  
    root1.right.left = getnode(55)  
    root1.right.right = getnode(70)  
    p = [None] 
    q = [None]  
      
    find_p_s(root1, 55, p, q)  
      
    if(p[0]) : 
        print(p[0].data, end = "") 
    if(q[0]) : 
        print("", q[0].data) 
  
# This code is contributed by  
# SHUBHAMSINGH10 






